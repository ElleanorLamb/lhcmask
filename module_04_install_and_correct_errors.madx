print, text="";
print, text="";
print, text="++++++++++++++++++++++++++++";
print, text="++ START MODULE 4: ERRORS ++";
print, text="++++++++++++++++++++++++++++";
print, text="";
print, text="";

on_disp = 0; 


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;
!               Prepare nominal twiss tables
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++;

twiss, table=nominal;   // used by orbit correction
beta.ip1=table(twiss,IP1,betx);value,beta.ip1;

! print nominal optics parameter at the MB, MQS and MSS for
! b2, b3, b4, b5, a2 and a3 correction
select, flag=twiss, clear;
select, flag=twiss,pattern=MB\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MBH\.   ,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.14,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.15,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.16,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.17,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.18,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.19,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.20,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,pattern=MQT\.21,class=multipole,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,class=MQS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,class=MSS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,class=MCO                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,class=MCD                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
select, flag=twiss,class=MCS                      ,column=name,k0L,k1L,betx,bety,dx,mux,muy;
twiss,  file='temp/optics0_MB.mad';

! print nominal optics parameter at the D1, MQX and triplet corrector
! for triplet correction
select, flag=twiss, clear;
select, flag=twiss, pattern=MQX  , class=multipole, column=name,betx,bety,x,y;
select, flag=twiss, pattern=MBX  , class=multipole, column=name,betx,bety,x,y;
select, flag=twiss, pattern=MBRC , class=multipole, column=name,betx,bety,x,y;
if (correct_for_D2==1){
  select, flag=twiss, pattern=MBRD , class=multipole, column=name,betx,bety,x,y;
};
select, flag=twiss, pattern=MQSX                  , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCQSX                 , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCSX                  , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCTX                  , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCOSX                 , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCOX                  , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCSSX                 , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCDX                  , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCDSX                 , column=name,betx,bety,x,y;
select, flag=twiss, pattern=MCTSX                 , column=name,betx,bety,x,y;
if (correct_for_MCBX==1){
  select, flag=twiss, pattern=MCBXF, class=multipole, column=name,betx,bety,x,y;
};
twiss,  file='temp/optics0_inser.mad';

!call, file="tools/BetaBeating.madx";

! disable crossing bumps
exec, crossing_disable;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                   Align separation magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

call, file="tools/align_sepdip.madx";
if (ver_lhc_run > 0) {
  exec,align_mbxw;  ! V6.503  D1
  exec,align_mbrc15;! V6.503 D2 in IR15
};
if (ver_hllhc_optics > 0) {
  exec, align_mbx15; ! HL-LHC D1
  exec, align_mbrd15;! HL-LHC D2 in IR15
};
exec, align_mbx28; ! V6.503 D1 in IR28
exec, align_mbrc28;! V6.503 D2 in IR28
exec, align_mbrs;  ! V6.503 D3 in IR4
exec, align_mbrb;  ! V6.503 D4 in IR4
if (ver_hllhc_optics > 0 && ver_hllhc_optics < 1.3) {
  call, file="tools/align_mbh_v1.madx"; ! align 11T dipoles
};
if (ver_hllhc_optics >= 1.3) {
  call, file="tools/align_mbh_v2.madx"; ! align 11T dipoles
};

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!         Call error subroutines (nominal machine and new IT/D1)
!                         and error tables
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

! Error routine and measured error table for nominal LHC
call, file="errors/LHC/Msubroutines.madx";
call, file="errors/LHC/Msubroutines_MS_MSS_MO.madx";
call, file="tools/Orbit_Routines.madx";
if (ver_lhc_run > 0)      { call, file="tools/SelectLHCMonCor_v1.madx"; };
if (ver_hllhc_optics > 0) { call, file="tools/SelectLHCMonCor_v2.madx"; };
if (on_errors_LHC==1){
  readtable, file="errors/LHC/rotations_Q2_integral.tab";
};

! Error routine and error table for new IT/D1/D2/Q4/Q5
if (ver_hllhc_optics < 1.3) {
  call, file="errors/HL-LHC/macro_error_v1.madx";   ! macros for error generation in the new IT/D1's
};
if (ver_hllhc_optics > 1.2) {
  call, file="errors/HL-LHC/macro_error_v3.madx";   ! macros for error generation in the new IT/D1's
};
useMQXFAB=0;
if (on_errors_IT==1){
  if (useMQXFAB==1) {
    call, file="errors/HL-LHC/ITa_errortable_v5"; ! target error table for the new IT
    call, file="errors/HL-LHC/ITb_errortable_v5"; ! target error table for the new IT
  } else {
    call, file="errors/HL-LHC/ITbody_errortable_v5"; ! target error table for the new IT
    call, file="errors/HL-LHC/ITnc_errortable_v5"; ! target error table for the new IT
    call, file="errors/HL-LHC/ITcs_errortable_v5"; ! target error table for the new IT
  };
};
if (on_errors_D1==1){
  call, file="errors/HL-LHC/D1_errortable_v1"; ! target error table for the new D1
};
if (on_errors_D2==1){
  call, file="errors/HL-LHC/D2_errortable_v5"; ! target error table for the new D2
  if (correct_for_D2==1){
    call, file="errors/HL-LHC/D2_empty_errortable"; ! We are only correcting the b3 errors, put the other errors to zero
  };
};

if (on_errors_MCBXF==1){
  call, file="errors/HL-LHC/MCBXFAB_errortable_v1";
};
if (on_errors_MBH==1){
  call, file="errors/HL-LHC/MBH_errortable_v3";
};
if (on_errors_MCBRD==1){
  call, file="errors/HL-LHC/MCBRD_errortable_v1";
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!                Switch ON/OFF some multipole
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

exec, ON_ALL_MULT;
ON_A1s =  0 ; ON_A1r =  0 ; ON_B1s =  0 ; ON_B1r =  0 ;
ON_A2s =  0 ; ON_A2r =  0 ; ON_B2s =  0 ; ON_B2r =  0 ;
ON_A3s =  1 ; ON_A3r =  1 ; ON_B3s =  1 ; ON_B3r =  1 ;
ON_A4s =  1 ; ON_A4r =  1 ; ON_B4s =  1 ; ON_B4r =  1 ;
ON_A5s =  1 ; ON_A5r =  1 ; ON_B5s =  1 ; ON_B5r =  1 ;
ON_A6s =  1 ; ON_A6r =  1 ; ON_B6s =  1 ; ON_B6r =  1 ;
ON_A7s =  1 ; ON_A7r =  1 ; ON_B7s =  1 ; ON_B7r =  1 ;
ON_A8s =  1 ; ON_A8r =  1 ; ON_B8s =  1 ; ON_B8r =  1 ;
ON_A9s =  1 ; ON_A9r =  1 ; ON_B9s =  1 ; ON_B9r =  1 ;
ON_A10s = 1 ; ON_A10r = 1 ; ON_B10s = 1 ; ON_B10r = 1 ;
ON_A11s = 1 ; ON_A11r = 1 ; ON_B11s = 1 ; ON_B11r = 1 ;
ON_A12s = 1 ; ON_A12r = 1 ; ON_B12s = 1 ; ON_B12r = 1 ;
ON_A13s = 1 ; ON_A13r = 1 ; ON_B13s = 1 ; ON_B13r = 1 ;
ON_A14s = 1 ; ON_A14r = 1 ; ON_B14s = 1 ; ON_B14r = 1 ;
ON_A15s = 1 ; ON_A15r = 1 ; ON_B15s = 1 ; ON_B15r = 1 ;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Define the seed number (for statistical error assignment in the new IT/D1)
! and call the corresponding measured error table for nominal LHC magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (on_errors_LHC==1){
  if (par_myseed==1) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-1.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-1.tfs" ;}; };
  if (par_myseed==2) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-2.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-2.tfs" ;}; };
  if (par_myseed==3) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-3.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-3.tfs" ;}; };
  if (par_myseed==4) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-4.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-4.tfs" ;}; };
  if (par_myseed==5) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-5.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-5.tfs" ;}; };
  if (par_myseed==6) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-6.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-6.tfs" ;}; };
  if (par_myseed==7) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-7.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-7.tfs" ;}; };
  if (par_myseed==8) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-8.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-8.tfs" ;}; };
  if (par_myseed==9) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-9.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-9.tfs" ;}; };
  if (par_myseed==10) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-10.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-10.tfs" ;}; };
  if (par_myseed==11) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-11.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-11.tfs" ;}; };
  if (par_myseed==12) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-12.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-12.tfs" ;}; };
  if (par_myseed==13) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-13.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-13.tfs" ;}; };
  if (par_myseed==14) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-14.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-14.tfs" ;}; };
  if (par_myseed==15) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-15.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-15.tfs" ;}; };
  if (par_myseed==16) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-16.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-16.tfs" ;}; };
  if (par_myseed==17) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-17.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-17.tfs" ;}; };
  if (par_myseed==18) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-18.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-18.tfs" ;}; };
  if (par_myseed==19) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-19.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-19.tfs" ;}; };
  if (par_myseed==20) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-20.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-20.tfs" ;}; };
  if (par_myseed==21) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-21.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-21.tfs" ;}; };
  if (par_myseed==22) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-22.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-22.tfs" ;}; };
  if (par_myseed==23) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-23.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-23.tfs" ;}; };
  if (par_myseed==24) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-24.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-24.tfs" ;}; };
  if (par_myseed==25) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-25.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-25.tfs" ;}; };
  if (par_myseed==26) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-26.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-26.tfs" ;}; };
  if (par_myseed==27) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-27.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-27.tfs" ;}; };
  if (par_myseed==28) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-28.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-28.tfs" ;}; };
  if (par_myseed==29) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-29.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-29.tfs" ;}; };
  if (par_myseed==30) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-30.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-30.tfs" ;}; };
  if (par_myseed==31) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-31.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-31.tfs" ;}; };
  if (par_myseed==32) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-32.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-32.tfs" ;}; };
  if (par_myseed==33) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-33.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-33.tfs" ;}; };
  if (par_myseed==34) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-34.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-34.tfs" ;}; };
  if (par_myseed==35) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-35.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-35.tfs" ;}; };
  if (par_myseed==36) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-36.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-36.tfs" ;}; };
  if (par_myseed==37) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-37.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-37.tfs" ;}; };
  if (par_myseed==38) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-38.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-38.tfs" ;}; };
  if (par_myseed==39) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-39.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-39.tfs" ;}; };
  if (par_myseed==40) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-40.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-40.tfs" ;}; };
  if (par_myseed==41) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-41.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-41.tfs" ;}; };
  if (par_myseed==42) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-42.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-42.tfs" ;}; };
  if (par_myseed==43) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-43.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-43.tfs" ;}; };
  if (par_myseed==44) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-44.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-44.tfs" ;}; };
  if (par_myseed==45) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-45.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-45.tfs" ;}; };
  if (par_myseed==46) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-46.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-46.tfs" ;}; };
  if (par_myseed==47) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-47.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-47.tfs" ;}; };
  if (par_myseed==48) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-48.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-48.tfs" ;}; };
  if (par_myseed==49) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-49.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-49.tfs" ;}; };
  if (par_myseed==50) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-50.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-50.tfs" ;}; };
  if (par_myseed==51) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-51.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-51.tfs" ;}; };
  if (par_myseed==52) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-52.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-52.tfs" ;}; };
  if (par_myseed==53) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-53.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-53.tfs" ;}; };
  if (par_myseed==54) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-54.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-54.tfs" ;}; };
  if (par_myseed==55) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-55.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-55.tfs" ;}; };
  if (par_myseed==56) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-56.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-56.tfs" ;}; };
  if (par_myseed==57) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-57.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-57.tfs" ;}; };
  if (par_myseed==58) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-58.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-58.tfs" ;}; };
  if (par_myseed==59) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-59.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-59.tfs" ;}; };
  if (par_myseed==60) {if (NRJ<4999.999) {readtable, file="errors/LHC/wise/injection_errors-emfqcs-60.tfs" ;}; if (NRJ>5000.000) {readtable, file="errors/LHC/wise/collision_errors-emfqcs-60.tfs" ;}; };
};


!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!             apply field errors to MB magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
ON_B2s =  1 ; ON_B2r =  1;    ! temporary !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
call, file="errors/LHC/Efcomp_MB.madx"  ;
ON_B2s =  0 ; ON_B2r =  0;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!     correct orbit distortion resulting from MB magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0){
  exec,   initial_micado(4);
  exec,   initial_micado(4);
};

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!           apply field errors to all other magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! Nominal LHC magnets
! Separation Dipoles
call, file="errors/LHC/Efcomp_MBRB.madx";
call, file="errors/LHC/Efcomp_MBRC.madx";
call, file="errors/LHC/Efcomp_MBRS.madx";
call, file="errors/LHC/Efcomp_MBX.madx" ;
call, file="errors/LHC/Efcomp_MBW.madx" ;

! Quadrupoles
ON_B2Saux=on_B2S;on_B2S=1; call, file="errors/LHC/Efcomp_MQW.madx" ; on_B2S=ON_B2Saux;
ON_B2Saux=on_B2S;on_B2S=1; call, file="errors/LHC/Efcomp_MQTL.madx"; on_B2S=ON_B2Saux;
ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQMC.madx"; on_B2S=ON_B2Saux;
ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQX.madx" ; on_B2S=ON_B2Saux;

if (on_errors_Q4==1 || ver_lhc_run > 0){
  ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQY.madx" ; on_B2S=ON_B2Saux;
} else {
    ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQY_noIP15.madx" ; on_B2S=ON_B2Saux;
};
ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQM.madx" ; on_B2S=ON_B2Saux;
if (on_errors_Q5==1 || ver_lhc_run > 0){
  ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQML.madx"; on_B2S=ON_B2Saux;
} else {
  ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQML_noIP15.madx"; on_B2S=ON_B2Saux;
};
ON_B2Saux=on_B2S;on_B2S=0; call, file="errors/LHC/Efcomp_MQ.madx"  ; on_B2S=ON_B2Saux;

! call, file="errors/LHC/Set_alignment_errors.madx";    ! temporary !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

! New IT/D1/D2/Q4/Q5
myseed = par_myseed;

if (on_errors_IT==1){
  eoption,seed=myseed+101;
  if (useMQXFAB==1) {
    call, file="errors/HL-LHC/Efcomp_MQXFA.madx";      ! new IT in IR1/5
    call, file="errors/HL-LHC/Efcomp_MQXFB.madx";
  } else {
    call, file="errors/HL-LHC/Efcomp_MQXFbody.madx"; ! new IT in IR1/5
    call, file="errors/HL-LHC/Efcomp_MQXFends.madx";                            ! new IT in IR1/5
  };
};
if (on_errors_D1==1){
  eoption,seed=myseed+102;call, file="errors/HL-LHC/Efcomp_MBXAB.madx";    ! new D1 in IR1/5
};
if (on_errors_D2==1){
  if (correct_for_D2==1){
    use_average_errors_MBRD=1;   ! using average errors for correction algorithm
  };
  eoption,seed=myseed+103;call, file="errors/HL-LHC/Efcomp_MBRD.madx";   	! new D2 in IR1/5
};
if (on_errors_Q4==1){
  call, file="errors/HL-LHC/Efcomp_MQY.madx";     ! old Q4 in IR1/5, but switched places around IP1-5
};
if (on_errors_MCBXF==1){
  eoption,seed=myseed+106;call, file="errors/HL-LHC/Efcomp_MCBXFAB.madx";  ! new triplet correctors in IR1/5
};
if (on_errors_MBH==1){
  ON_B2saux=on_B2s;on_B2s=0; ON_B2raux=on_B2r;on_B2r=0;
  eoption,seed=myseed+107;call, file="errors/HL-LHC/Efcomp_MBH.madx";
  on_B2s=ON_B2saux; on_B2r=ON_B2raux;
};
if (on_errors_MCBRD==1){
  eoption,seed=myseed+108;call, file="errors/HL-LHC/Efcomp_MCBRD.madx";
};

select, flag=error, clear;
select, flag=error, pattern=".";
esave,  file="error_all.tfs";


print, text="===============================================";
print, text="======  OPTICS PARAMETERS: AFTER ERRORS  ======";
print, text="===============================================";
call, file="tools/get_optics_params.madx";




!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!               correction of field errors in MB (compatible with V6.503 & SLHC)
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
select, flag=error, clear;
select, flag=error, pattern=MB\.,class=multipole;
select, flag=error, pattern=MBH\.,class=multipole;
esave,  file="temp/MB.errors";
system, "errors/HL-LHC/corr_MB_ats_v4";
call,   file="temp/MB_corr_setting.mad";
!exec, reset_MB_corr;

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! correction of triplet and D1 (only in collision, not compatible V6.503)
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if (NRJ>5000.0000){
  option, echo, warn, -info;
  select, flag=error, clear;
  select, flag=error, pattern=MQX,  class=multipole;
  select, flag=error, pattern=MBX,  class=multipole;
  !select, flag=error, pattern=MBRC, class=multipole;
  if (correct_for_D2==1){
    select, flag=error, pattern=MBRD, class=multipole;
  };
  if (correct_for_MCBX==1){
    select, flag=error, pattern=MCBXF, class=multipole;
  };
  esave,  file="temp/tripD1D2.errors";
  system, "errors/HL-LHC/corr_tripD1_v6";
  call,   file="temp/MCX_setting.mad";
  !kcsx3.l1:=0 ;kcsx3.r1:=0 ;kcsx3.l5:=0 ;kcsx3.r5:=0 ; !switch off b3  correction in IR1 and IR5
  !kcox3.l1:=0 ;kcox3.r1:=0 ;kcox3.l5:=0 ;kcox3.r5:=0 ; !switch off b4  correction in IR1 and IR5
  !kcdx3.l1:=0 ;kcdx3.r1:=0 ;kcdx3.l5:=0 ;kcdx3.r5:=0 ; !switch off b5  correction in IR1 and IR5
  !kctx3.l1:=0 ;kctx3.r1:=0 ;kctx3.l5:=0 ;kctx3.r5:=0 ; !switch off b6  correction in IR1 and IR5
  !kqsx3.l1:=0 ;kqsx3.r1:=0 ;kqsx3.l5:=0 ;kqsx3.r5:=0 ; !switch off a2  correction in IR1 and IR5
  !kcssx3.l1:=0;kcssx3.r1:=0;kcssx3.l5:=0;kcssx3.r5:=0; !switch off a3  correction in IR1 and IR5
  !kcosx3.l1:=0;kcosx3.r1:=0;kcosx3.l5:=0;kcosx3.r5:=0; !switch off a4  correction in IR1 and IR5
  !kcdsx3.l1:=0;kcdsx3.r1:=0;kcdsx3.l5:=0;kcdsx3.r5:=0; !switch off a5  correction in IR1 and IR5
  !kctsx3.l1:=0;kctsx3.r1:=0;kctsx3.l5:=0;kctsx3.r5:=0; !switch off a6  correction in IR1 and IR5

  kcsx3.l2 :=0;kcsx3.r2 :=0;kcsx3.l8 :=0;kcsx3.r8 :=0; !switch off b3  correction in IR2 and IR8
  kcox3.l2 :=0;kcox3.r2 :=0;kcox3.l8 :=0;kcox3.r8 :=0; !switch off b4  correction in IR2 and IR8
  kctx3.l2 :=0;kctx3.r2 :=0;kctx3.l8 :=0;kctx3.r8 :=0; !switch off b6  correction in IR2 and IR8
  kqsx3.l2 :=0;kqsx3.r2 :=0;kqsx3.l8 :=0;kqsx3.r8 :=0; !switch off a2  correction in IR2 and IR8
  kcssx3.l2:=0;kcssx3.r2:=0;kcssx3.l8:=0;kcssx3.r8:=0; !switch off a3  correction in IR2 and IR8
  kcosx3.l2:=0;kcosx3.r2:=0;kcosx3.l8:=0;kcosx3.r8:=0; !switch off a4  correction in IR2 and IR8

  option, -echo; !exec, reset_MQX_corr;                             !switch off all IT multipole correction in all IR's
};

if (correct_for_D2==1){
  ! Remove the average errors and assign the real errors of D2
  use_average_errors_MBRD=0;
  call, file="errors/HL-LHC/D2_errortable_v5";
  eoption,add=false;
  eoption,seed=myseed+103;
  call, file="errors/HL-LHC/Efcomp_MBRD.madx";
  eoption,add=true;
};





!       




print, text="==================================================";
print, text="======  OPTICS PARAMETERS: BEFORE MATCHING  ======";
print, text="==================================================";
call, file="tools/get_optics_params.madx";



!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!    correct orbit distortion resulting from other magnets
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0){
  exec, initial_micado(4);
  exec, initial_micado(4);
  exec, initial_micado(4);
  exec, initial_micado(4);
};

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!    final orbit correction before applying crossing scheme
!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if((ON_A1S)^2+(ON_A1r)^2+(ON_B1S)^2+(ON_B1r)^2 >0){
  exec, final_micado(0.004);
};

! end of orbit correction, now switch ON crossing scheme
! restoring crossing angle
exec, crossing_restore;

! coguess,x=x.ip1,px=px.ip1,y=y.ip1,py=py.ip1;

